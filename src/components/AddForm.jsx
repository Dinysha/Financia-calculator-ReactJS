// TODO:
// [] —É–±—Ä–∞—Ç—å –±–∞–≥, –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ "–∏–Ω–æ–µ", —Ç–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å—Ö–æ–¥
// [?] –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç—ã, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –æ–±–ª–æ–≤–ª—è–µ—Ç—Å—è
// [] –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞ —Ç—ç–≥–æ–≤
// [+] —Å–¥–µ–ª–∞—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –∏–Ω–ø—É—Ç —Ç–∞–π—Ç–ª
// [+] –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
// [+] –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ø–ª–∞—à–∫–µ —É–±—Ä–∞—Ç—å –∫—Ä–µ—Å—Ç–∏–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–∞–ª–∫–∏
// [+] –æ—á–∏—â–∞—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –Ω–µ–µ
// [+] –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ data-context
// [+] –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
// [+] –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–±–º–∏—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
// [+] –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–∏–Ω—Ç –¥–æ—Ö–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É
// [+] –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–ø—É—Ç–æ–≤ –≤ —Å–∞–º–æ–π —Ñ–æ—Ä–º–µ
// [-] —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–Ω–µ–∏–µ –∏–Ω–ø—É—Ç–æ–≤ –≤ –º–æ–¥–∞–ª–∫–µ
// [-] –ø–æ–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø—ã –≤ —Ñ–æ—Ä–º–µ
// [-] –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏–µ –Ω–∞ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ 2 –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã/ –¥–ª—è —á–µ–≥–æ?? (–¥–ª—è —Ä–∞–∑–≤–µ–∑–¥–µ–Ω–∏—è –¥–≤—É—Ö –¥–∏–∞–≥—Ä–∞–º–º)

import React, { useContext, useReducer, useRef, useState } from 'react'
import {
  DatePicker,
  Form,
  Input,
  InputNumber,
  Radio,
  Select,
  Tag,
  Button,
  Result,
} from 'antd'
import { FromDataContext } from '../context/FormDataContext'
import { DataArrayContext } from '../context/data-context'
import reducerHooks from '../reducer/reducerHooks'

const options = [
  {
    id: '—Å–µ–º—å—è',
    label: '—Å–µ–º—å—è',
    value: '#ff9898',
  },
  {
    label: '–¥–æ–º',
    value: '#98ffc5',
  },
  {
    label: '–∫—Ä–µ–¥–∏—Ç',
    value: '#9aff98',
  },
  {
    label: '–º–∞—à–∏–Ω–∞',
    value: '#98ecff',
  },
  {
    label: '–¥—Ä—É–≥–æ–µ',
    value: '#dd98ff',
  },
]

const receips = [
  {
    label: '—Ä–∞–±–æ—Ç–∞',
    value: '#ffe498',
  },
  {
    label: '–∏–Ω–æ–µ',
    value: '#98a6ff',
  },
]

const tagRender = (props) => {
  const { label, value, closable, onClose } = props
  const onPreventMouseDown = (event) => {
    event.preventDefault()
    event.stopPropagation()
  }
  return (
    <Tag
      color={value}
      onMouseDown={onPreventMouseDown}
      closable={closable}
      onClose={onClose}
      style={{
        marginRight: 3,
      }}
    >
      {label}
    </Tag>
  )
}

export const initialState = {
  text: '',
  addCategory: '',
  addColor: '',
  addDate: '',
  addAmount: '',
}

export default function AddForm({ formRef, onChange }) {
  const [state, dispatch] = useReducer(reducerHooks, initialState)
  const [componentDisabled, setComponentDisabled] = useState(false)
  const [submittingForm, setSubmittingForm] = useState(false)
  const { sendRadioValue, radioValue, setIsModalOpen, isModalOpen } =
    useContext(FromDataContext)
  const { addDataArray, sendAddDataArray } = useContext(DataArrayContext)
  const [addCategory, setAddCategory] = useState('')

  const validateMessages = {
    required: 'üí∞',
    types: {
      number: '–∫–æ–ª–∏—á–µ—Å–≤–æ –¥–µ–Ω–µ–≥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç',
    },
    number: {
      range: 'üí∏',
    },
  }

  function onFinish() {
    sendAddDataArray(
      radioValue,
      state.text,
      state.addCategory,
      state.addColor,
      state.addDate ?? new Date(),
      state.addAmount
    )
    formRef.current.resetFields()
    setSubmittingForm(true)
  }

  if (submittingForm === true) {
    return (
      <Result
        status="success"
        title="–î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        subTitle=""
        extra={[
          <Button
            type="primary"
            key="console"
            onClick={() => {
              setIsModalOpen(false)
              setSubmittingForm(false)
            }}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞—Ä–Ω–∏—Ü—É
          </Button>,
          <Button
            key="buy"
            onClick={() => {
              setSubmittingForm(false)
            }}
          >
            –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ
          </Button>,
        ]}
      />
    )
  }

  function hendleRadioButton(e) {
    console.log(e.target.value)
    const newValue = e.target.value === 'expenses' ? false : true
    sendRadioValue(newValue)
    dispatch({ type: 'CLEAR_CATEGORY' })
    console.log(newValue)
    return newValue
  }

  function handleGenInput(e) {
    dispatch({ type: 'SET_TEXT', payload: e.target.value })
  }

  function heandleSelect(label, value) {
    if (value && value.length > 0 && value[0].label) {
      const selectedLabel = value[0].label
      const selectedColor = value[0].value
      dispatch({ type: 'SET_CATEGORY', payload: selectedLabel })
      dispatch({ type: 'SET_COLOR', payload: selectedColor })
      console.log(selectedLabel)
      console.log(selectedColor)
    } else {
      console.log('–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
    }
  }

  function heandleDate(value) {
    dispatch({ type: 'SET_ADD_DATE', payload: value })
  }

  function heandleAmount(value) {
    dispatch({ type: 'SET_ADD_AMOUNT', payload: value })
  }

  return (
    <>
      <Form
        ref={formRef}
        labelCol={{ span: 4 }}
        wrapperCol={{ span: 14 }}
        layout="horizontal"
        disabled={componentDisabled}
        style={{
          maxWidth: 600,
        }}
        validateMessages={validateMessages}
        onFinish={onFinish}
        initialValues={{ operation: false }}
      >
        <Form.Item
          name="–¥–æ–±–∞–≤–∏—Ç—å"
          rules={[
            {
              required: true,
              message: 'üôà',
            },
          ]}
        >
          <Radio.Group onChange={hendleRadioButton}>
            <Radio value="expenses">–†–∞—Å—Ö–æ–¥—ã</Radio>
            <Radio value="insome">–î–æ—Ö–æ–¥—ã</Radio>
          </Radio.Group>
        </Form.Item>
        <Form.Item
          name="–æ–ø–∏—Å–∞–Ω–∏–µ"
          rules={[
            {
              required: true,
              message: 'üôà',
            },
          ]}
        >
          <Input
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
            maxLength={20}
            onChange={handleGenInput}
          />
        </Form.Item>
        <Form.Item
          name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
          rules={[
            {
              required: true,
              message: 'üôà',
            },
          ]}
        >
          {radioValue === false ? (
            <Select
              placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
              mode="multiple"
              maxCount={1}
              tagRender={tagRender}
              style={{
                width: '100%',
              }}
              options={options}
              onChange={(label, value) => heandleSelect(label, value)}
            />
          ) : (
            <Select
              placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
              mode="multiple"
              maxCount={1}
              tagRender={tagRender}
              style={{
                width: '100%',
              }}
              options={receips}
              onChange={(label, value) => heandleSelect(label, value)}
            />
          )}
        </Form.Item>
        <Form.Item
          name="–î–∞—Ç–∞"
          rules={[
            {
              required: true,
              message: 'üôà',
            },
          ]}
        >
          <DatePicker placeholder="–î–∞—Ç–∞" onChange={heandleDate} />
        </Form.Item>
        <Form.Item
          name="—Å—É–º–º–∞"
          rules={[
            {
              required: true,
              type: 'number',
              min: 0,
            },
          ]}
        >
          <InputNumber placeholder="–°—É–º–º–∞" onChange={heandleAmount} />
        </Form.Item>
        <Form.Item
          wrapperCol={{
            offset: 18,
            span: 10,
          }}
        >
          <Button type="primary" htmlType="submit">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </Form.Item>
      </Form>
    </>
  )
}
